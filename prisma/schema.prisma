// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "debian-openssl-12.2.0-14"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int     @id @default(autoincrement())
  name              String
  email             String?     @unique
  password          String
  role              String      @default("user")
  paymentAccounts   PaymentAccount[] 
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  @@map("users")
}


// Payment History: Records of transactions
model PaymentHistory {
  id            Int     @id @default(autoincrement())
  transactionId String  @unique @default(uuid())
  amount        Float
  status        String
  toAddress     String
  currency      String
  timestamp     DateTime    @default(now())
  accountId     Int
  account       PaymentAccount @relation(fields: [accountId], references: [id])
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}

// Payment Account: One user can have multiple accounts like credit, debit, loan...
model PaymentAccount {
  id              Int     @id @default(autoincrement())
  accountId       String  @unique @default(uuid())
  type            String      // e.g., credit, debit, loan
  paymentNumber   String    
  balance         Float       @default(0)
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  paymentHistory  PaymentHistory[]
  updatedAt       DateTime    @updatedAt
  createdAt       DateTime    @default(now())
}

